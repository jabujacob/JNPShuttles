//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JNPShuttle.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TripsEntities : DbContext
    {
        public TripsEntities()
            : base("name=TripsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskMasterList> TaskMasterLists { get; set; }
        public virtual DbSet<TripSheet> TripSheets { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Van> Vans { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<SuperShuttleView> SuperShuttleViews { get; set; }
    
        public virtual ObjectResult<Get_Driver_Dashboard_Result> Get_Driver_Dashboard(string superShuttleID)
        {
            var superShuttleIDParameter = superShuttleID != null ?
                new ObjectParameter("SuperShuttleID", superShuttleID) :
                new ObjectParameter("SuperShuttleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Driver_Dashboard_Result>("Get_Driver_Dashboard", superShuttleIDParameter);
        }
    
        public virtual ObjectResult<Get_Driver_Dashboard_Details_Result> Get_Driver_Dashboard_Details(string superShuttleID)
        {
            var superShuttleIDParameter = superShuttleID != null ?
                new ObjectParameter("SuperShuttleID", superShuttleID) :
                new ObjectParameter("SuperShuttleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Driver_Dashboard_Details_Result>("Get_Driver_Dashboard_Details", superShuttleIDParameter);
        }
    
        public virtual ObjectResult<TripSheet> Get_TripSheets_By_DriverID(Nullable<int> driverID)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripSheet>("Get_TripSheets_By_DriverID", driverIDParameter);
        }

        public virtual ObjectResult<TripSheet> GetTripSheetsByUserID(Nullable<int> userId)
        {
            var userIdParameter =userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TripSheet>("GetTripSheetByUserId", userIdParameter);
        }

        public virtual ObjectResult<getTaskMasterListForDateRange_Result> getTaskMasterListForDateRange(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTaskMasterListForDateRange_Result>("getTaskMasterListForDateRange", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertErrorLog(string exceptionMessage, string username)
        {
            var exceptionMessageParameter = exceptionMessage != null ?
                new ObjectParameter("ExceptionMessage", exceptionMessage) :
                new ObjectParameter("ExceptionMessage", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertErrorLog", exceptionMessageParameter, usernameParameter);
        }
    
        public virtual int TransferNewTaskToTaskMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferNewTaskToTaskMaster");
        }
    
        public virtual int TruncateTask()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TruncateTask");
        }
    
        public virtual ObjectResult<string> ValidateTripSheetEntry(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> vanID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var vanIDParameter = vanID.HasValue ?
                new ObjectParameter("VanID", vanID) :
                new ObjectParameter("VanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ValidateTripSheetEntry", startDateParameter, endDateParameter, vanIDParameter);
        }
        public virtual ObjectResult<string> ValidateTripSheetEntryBeforeSave(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> vanID, Nullable<int> tripID, Nullable<decimal> gross, Nullable<int> startKM, Nullable<int> endKM)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));

            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));

            var vanIDParameter = vanID.HasValue ?
                new ObjectParameter("VanID", vanID) :
                new ObjectParameter("VanID", typeof(int));

            var tripIDParameter = tripID.HasValue ?
                new ObjectParameter("TripID", tripID) :
                new ObjectParameter("TripID", typeof(int));

            var grossParameter = gross.HasValue ?
                new ObjectParameter("Gross", gross) :
                new ObjectParameter("Gross", typeof(decimal));

            var startKMParameter = startKM.HasValue ?
                new ObjectParameter("StartKM", startKM) :
                new ObjectParameter("StartKM", typeof(int));

            var endKMParameter = endKM.HasValue ?
                new ObjectParameter("EndKM", endKM) :
                new ObjectParameter("EndKM", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ValidateTripSheetEntryBeforeSave", startDateParameter, endDateParameter, vanIDParameter, tripIDParameter, grossParameter, startKMParameter, endKMParameter);
        }
    }
}
